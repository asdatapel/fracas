#version 430 core

out vec4 FragColor;

uniform float t;
uniform vec3 camera_position;

uniform sampler2D albedo_texture;
uniform sampler2D normal_texture;
uniform sampler2D metal_texture;
uniform sampler2D roughness_texture;
uniform sampler2D overlay_texture;

uniform samplerCube irradiance;
uniform samplerCube env_map;
uniform sampler2D   brdf;  

in vec3 frag_world_pos;
in vec2 frag_main_uv;
in vec2 frag_text_uv;
in vec3 frag_normal;

const float PI = 3.14159265359;

// everything in this file is from
// https://learnopengl.com/PBR/Lighting

vec3 fresnelSchlick(float cosTheta, vec3 f0)
{
    return f0 + (1.0 - f0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

float DistributionGGX(vec3 n, vec3 h, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(n, h), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(vec3 n, vec3 V, vec3 l, float roughness)
{
    float NdotV = max(dot(n, V), 0.0);
    float NdotL = max(dot(n, l), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}   

void main()
{
    vec3 light_pos = vec3(0, 0, 0);
    vec3 light_color = vec3(10.0, 10, 10);

    vec3 main_albedo = texture(albedo_texture, frag_main_uv).rgb;
    vec4 text_albedo = texture(overlay_texture, frag_text_uv);
    vec3 albedo = mix(main_albedo, vec3(text_albedo * 5), text_albedo.a);
    vec3 normal = texture(normal_texture, frag_main_uv).xyz;
    float main_metal = texture(metal_texture, frag_main_uv).x;
    float metal = mix(main_metal, 0, text_albedo.a);
    float main_roughness = max(texture(roughness_texture, frag_main_uv).x, 0.001);
    float roughness = mix(main_roughness, 0.1 + (0.9 - text_albedo.g), text_albedo.a);

    vec3 n = normalize(frag_normal);
    vec3 V = normalize(camera_position - frag_world_pos);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);
    
    //////////////do this per light
    vec3 l = normalize(light_pos - frag_world_pos);
    vec3 h = normalize(V + l);
    float distance    = length(light_pos - frag_world_pos);
    float attenuation = 1.0 / (distance * distance);
    vec3 radiance     = light_color * attenuation;        
    
    float ndf = DistributionGGX(n, h, roughness);        
    float g   = GeometrySmith(n, V, l, roughness);      
    vec3 f    = fresnelSchlick(max(dot(h, V), 0.0), f0);       
    
    vec3 kS = f;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metal;	  
    
    vec3 numerator    = ndf * g * f;
    float denominator = 4.0 * max(dot(n, V), 0.0) * max(dot(n, l), 0.0);
    vec3 specular     = numerator / max(denominator, 0.001);  
        
    float NdotL = max(dot(n, l), 0.0);                
    vec3  light_out = (kD * albedo / PI + specular) * radiance * NdotL; 
    //////////////
    
    vec3 R = reflect(-V, n);   
    vec3 F = FresnelSchlickRoughness(max(dot(n, V), 0.0), f0, roughness);
    vec3 ambient_kS = F;
    vec3 ambient_kD = 1.0 - ambient_kS;
    ambient_kD *= 1.0 - metal;	  
    vec3 ambient_irradiance = texture(irradiance, n).rgb;
    vec3 ambient_diffuse      = ambient_irradiance * albedo;
    
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    //////////////////////////////////////////////////////////////////////
    // BAD HACK BAD HACK BAD HACK env_map map will look too rough at high LODs
    // vec2 standardLod = textureQueryLod(env_map, R);
    // float actualLod = max(standardLod.x, roughness * MAX_REFLECTION_LOD);
    //////////////////////////////////////////////////////////////////////
    vec3 prefilteredColor = textureLod(env_map, R, roughness * MAX_REFLECTION_LOD).rgb;   
    vec2 envBRDF  = texture(brdf, vec2(max(dot(n, V), 0.0), roughness)).rg;
    vec3 ambient_specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
    
    vec3 ambient = ambient_kD * ambient_diffuse + ambient_specular; 

    vec3 color = light_out + ambient;
    //color += text_albedo.a; // want text to glow a little
	
    FragColor = vec4(color, 1.0);
    // FragColor = vec4(frag_uv, 0, 1.0);
} 