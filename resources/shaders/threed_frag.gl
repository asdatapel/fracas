#version 330 core

out vec4 FragColor;

uniform float t;

uniform sampler2D albedo_tex;
uniform sampler2D normal_tex;
uniform sampler2D metal_tex;
uniform sampler2D roughness_tex;

in vec3 frag_world_pos;
in vec2 frag_uv;
in vec3 frag_normal;

const float PI = 3.14159265359;

// everything in this file is from
// https://learnopengl.com/PBR/Lighting

vec3 fresnelSchlick(float cosTheta, vec3 f0)
{
    return f0 + (1.0 - f0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

float DistributionGGX(vec3 n, vec3 h, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(n, h), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(vec3 n, vec3 V, vec3 l, float roughness)
{
    float NdotV = max(dot(n, V), 0.0);
    float NdotL = max(dot(n, l), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

void main()
{
    vec3 light_pos = vec3(0.5, sin(t), 1.5);
    vec3 light_color = vec3(3,2,1);

    vec3 cam_pos = vec3(0.0, 0.0, 0.0);

    vec3 albedo = texture(albedo_tex, frag_uv).xyz;
    vec3 normal = texture(normal_tex, frag_uv).xyz;
    float metal = texture(metal_tex, frag_uv).x;
    float roughness = texture(roughness_tex, frag_uv).x;

    vec3 n = -normalize(frag_normal);
    vec3 V = normalize(cam_pos - frag_world_pos);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);
    
    //////////////do this per light
    vec3 l = normalize(light_pos - frag_world_pos);
    vec3 h = normalize(V + l);
    float distance    = length(light_pos - frag_world_pos);
    float attenuation = 1.0 / (distance * distance);
    vec3 radiance     = light_color * attenuation;        
    
    float ndf = DistributionGGX(n, h, roughness);        
    float g   = GeometrySmith(n, V, l, roughness);      
    vec3 f    = fresnelSchlick(max(dot(h, V), 0.0), f0);       
    
    vec3 kS = f;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metal;	  
    
    vec3 numerator    = ndf * g * f;
    float denominator = 4.0 * max(dot(n, V), 0.0) * max(dot(n, l), 0.0);
    vec3 specular     = numerator / max(denominator, 0.001);  
        
    float NdotL = max(dot(n, l), 0.0);                
    vec3  light_out = (kD * albedo / PI + specular) * radiance * NdotL; 

    vec3 color = light_out;
	
    // color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
    // FragColor = vec4(frag_uv, 0.0, 1.0);
} 