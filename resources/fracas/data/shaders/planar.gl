$vert_shader
#version 430 core

$include pbr_lit_3d.vert

layout (location = $vertex_output) out vec4 frag_clip_pos;

layout (location = $uniform_push) uniform mat4 reflected_projection;

void main()
{
  frag_clip_pos = reflected_projection * model * vec4(pos, 1);
  pbr_lit_3d_vert();
}

$frag_shader
#version 430 core


$include reflections.planar
$include pbr_lit_3d.frag

$set material_offset $texture
uniform layout(binding = $texture) sampler2D albedo_texture;
uniform layout(binding = $texture) sampler2D normal_texture;
uniform layout(binding = $texture) sampler2D ao_texture;

layout (location = $frag_input) in vec4 frag_clip_pos;

out vec4 FragColor;

vec4 planar_clip_pos()
{
    return frag_clip_pos;
}

void main()
{
    vec3 albedo = texture(albedo_texture, frag_uv).xyz;
    vec3 normal = texture(normal_texture, frag_uv).xyz;
    float ao = texture(ao_texture, frag_uv).x;

    FragColor = pbr_lit_3d_frag(albedo, frag_normal, 0, 0, vec3(0, 0, 0), ao, 1);
} 