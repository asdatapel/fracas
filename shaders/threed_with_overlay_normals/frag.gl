#version 330 core

out vec4 FragColor;

in vec3 frag_world_pos;
in vec2 frag_main_uv;
in vec3 frag_normal;
in vec3 frag_tangent;
in vec3 frag_bitangent;

uniform vec3 camera_position;
uniform sampler2D overlay_texture;

#include debug_uniform 
#include pbr_uniforms  
#include pbr_env_uniforms
#include light_uniforms

#include consts  
#include pbr


void main()
{
    vec3 albedo      = texture(albedo_texture, frag_main_uv).rgb;
    float metal      = texture(metal_texture, frag_main_uv).x;
    float roughness = max(texture(roughness_texture, frag_main_uv).x, 0.001); // zero roughness bad
    vec3 ts_normal = texture(normal_texture, frag_main_uv).xyz  * 2.0 - 1.0;
    vec3 emit = texture(emit_texture, frag_main_uv).rgb;
    float ao = texture(ao_texture, frag_main_uv).x;
    ao = 1;

    // vec3 bitangent = cross(normalize(frag_tangent), normalize(frag_normal));
    mat3 tbn = mat3(normalize(frag_tangent), normalize(frag_bitangent), normalize(frag_normal));
    vec3 normal = normalize(tbn * ts_normal); 
   
    vec3 light_out = {0, 0, 0};
    for (int i = 0; i < num_lights; i++){
        vec3 this_light_out = PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, spot_lights[i]); 
        light_out += this_light_out;
    }
    vec3 ambient = PbrAmbient(irradiance, env_map, brdf, normal, albedo, roughness, metal, ao);

    vec3 color = light_out + ambient + (emit * 10);
    FragColor = vec4(color, 1.0);
} 