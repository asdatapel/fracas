#section consts
const float PI = 3.14159265359;

#section debug_uniform
uniform float t;

#section pbr_uniforms
uniform sampler2D albedo_texture;
uniform sampler2D normal_texture;
uniform sampler2D metal_texture;
uniform sampler2D roughness_texture;
uniform sampler2D emit_texture;
uniform sampler2D ao_texture;

#section pbr_env_uniforms
uniform samplerCube irradiance;
uniform samplerCube env_map;
uniform sampler2D   brdf;  

#section light_uniforms
const int MAX_LIGHTS = 10;
// TODO needs better attenuation
struct PointLight
{
  vec3 pos;
  vec3 color;
};
struct SpotLight
{
  vec3 pos;
  vec3 direction;
  vec3 color;
  float inner_angle;
  float outer_angle;
};
layout (std140, binding = 0) uniform lights
{
    SpotLight spot_lights[MAX_LIGHTS];
    uint num_lights;
};

#section pbr
// everything in this section is from
// https://learnopengl.com/PBR/Lighting
float DistributionGGX(vec3 n, vec3 h, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(n, h), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 n, vec3 V, vec3 l, float roughness)
{
    float NdotV = max(dot(n, V), 0.0);
    float NdotL = max(dot(n, l), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
vec3 FresnelSchlick(float cosTheta, vec3 f0)
{
    return f0 + (1.0 - f0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

vec3 CalculatePointLight(vec3 to_eye, vec3 to_light, float to_light_dist, 
                         vec3 halfway, PointLight light)
{
    float attenuation = 1.0 / (to_light_dist * to_light_dist); // TODO needs better attenuation
    vec3  radiance    = light.color * attenuation;  
    return radiance;
}

vec3 CalculateSpotLight(vec3 to_eye, vec3 to_light, float to_light_dist, 
                        vec3 halfway, SpotLight light)
{
    float min_cos = cos(light.outer_angle);
    float max_cos = cos(light.inner_angle);
    float spotlight_coefficient = smoothstep(min_cos, max_cos, dot(light.direction, -to_light));

    float attenuation = 1.0 / (to_light_dist * to_light_dist); // TODO needs better attenuation
    return spotlight_coefficient * light.color * attenuation;
}

vec3 PbrLight(vec3 position, vec3 normal, vec3 camera, vec3 albedo,
              float roughness, float metal, SpotLight light)
{
    vec3  to_eye        = normalize(camera - position);
    vec3  to_light      = normalize(light.pos - position);
    float to_light_dist = length(light.pos - position);
    vec3  halfway       = normalize(to_eye + to_light);
    vec3 radiance       = CalculateSpotLight(to_eye, to_light, to_light_dist, halfway, light);
    
    vec3 f0   = vec3(0.04); 
    f0        = mix(f0, albedo, metal);
    float ndf = DistributionGGX(normal, halfway, roughness);        
    float g   = GeometrySmith(normal, to_eye, to_light, roughness);      
    vec3 f    = FresnelSchlick(max(dot(halfway, to_eye), 0.0), f0);       
    
    vec3 kS = f;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metal;	  
    
    vec3 numerator    = ndf * g * f;
    float denominator = 4.0 * max(dot(normal, to_eye), 0.0) * max(dot(normal, to_light), 0.0);
    vec3 specular     = numerator / max(denominator, 0.001);  
        
    float NdotL = max(dot(normal, to_light), 0.0);    
    return (kD * albedo / PI + specular) * radiance * NdotL;             
}

vec3 PbrAmbient(samplerCube irradiance, samplerCube env_map, sampler2D brdf, vec3 albedo, float roughness, float metal, float ao)
{
    vec3 n = normalize(frag_normal);
    vec3 V = normalize(camera_position - frag_world_pos);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);

    vec3 R = reflect(-V, n);   
    vec3 F = FresnelSchlickRoughness(max(dot(n, V), 0.0), f0, roughness);
    vec3 ambient_kS = F;
    vec3 ambient_kD = 1.0 - ambient_kS;
    ambient_kD *= 1.0 - metal;	  
    vec3 ambient_irradiance = texture(irradiance, n).rgb;
    vec3 ambient_diffuse = ambient_irradiance * albedo;
    
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    vec3 prefilteredColor = textureLod(env_map, R, roughness * MAX_REFLECTION_LOD).rgb;   
    vec2 envBRDF  = texture(brdf, vec2(max(dot(n, V), 0.0), roughness)).rg;
    vec3 ambient_specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
    
    ao = sqrt(ao); // blender ao is too strong
    return (ambient_kD * ambient_diffuse + ambient_specular) * ao; 
}