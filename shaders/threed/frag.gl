#version 330 core

out vec4 FragColor;

in vec3 frag_world_pos;
in vec2 frag_uv;
in vec3 frag_normal;

in vec4 frag_light_pos;

uniform vec3 camera_position;

#include debug_uniform 
#include pbr_uniforms  
#include pbr_env_uniforms  
#include light_uniforms

layout(binding=9) uniform sampler2DShadow shadow_map;

#include consts  
#include pbr

float sample_shadow_map(sampler2DShadow map, vec4 position)
{
    vec3 ndc = (position.xyz / position.w) * 0.5 + 0.5;
    return texture(map, vec3(ndc.xy, ndc.z - 0.0005));
}
float sample_shadow_map(sampler2D map, vec4 position)
{
    vec3 ndc = (position.xyz / position.w) * 0.5 + 0.5;
    float shadow_map_depth = texture(map, ndc.xy).x;
    return shadow_map_depth >= ndc.z - 0.00005 ? 1 : 0;
}

void main()
{
    vec3 albedo = texture(albedo_texture, frag_uv).xyz;
    vec3 normal = texture(normal_texture, frag_uv).xyz;
    float metal = texture(metal_texture, frag_uv).x;
    float roughness = max(texture(roughness_texture, frag_uv).x, 0.001); // zero roughness bad
    vec3 emit = texture(emit_texture, frag_uv).rgb;
    float ao = texture(ao_texture, frag_uv).x;

    normal = normalize(frag_normal);
    
    float lit = sample_shadow_map(shadow_map, frag_light_pos);

    vec3 light_out = {0, 0, 0};
    for (int i = 0; i < num_lights; i++){
        if (i == 21)
            light_out += lit * PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, spot_lights[i]); 
        else
            light_out += PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, spot_lights[i]); 
    }
    vec3 ambient = PbrAmbient(irradiance, env_map, brdf, normal, albedo, roughness, metal, ao);

    vec3 color = light_out + ambient + (emit * 10);
    FragColor = vec4(color, 1);
} 