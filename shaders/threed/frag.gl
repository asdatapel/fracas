#version 330 core

out vec4 FragColor;

in vec3 frag_world_pos;
in vec2 frag_uv;
in vec3 frag_normal;

uniform vec3 camera_position;

#include debug_uniform 
#include pbr_uniforms  
#include pbr_env_uniforms  
#include light_uniforms

#include consts  
#include pbr

void main()
{
    vec3 albedo = texture(albedo_texture, frag_uv).xyz;
    vec3 normal = texture(normal_texture, frag_uv).xyz;
    float metal = texture(metal_texture, frag_uv).x;
    float roughness = max(texture(roughness_texture, frag_uv).x, 0.001); // zero roughness bad
    vec3 emit = texture(emit_texture, frag_uv).rgb;
    float ao = texture(ao_texture, frag_uv).x;

    normal = normalize(frag_normal);
    vec3 light_out = {0, 0, 0};
    for (int i = 0; i < num_lights; i++){
        light_out += PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, spot_lights[i]); 
    }
    vec3 ambient = PbrAmbient(irradiance, env_map, brdf, albedo, roughness, metal, ao);

    vec3 color = light_out + ambient + (emit * 3);

    FragColor = vec4(color, 1.0);
    //FragColor = vec4(emit, 1.0);
} 