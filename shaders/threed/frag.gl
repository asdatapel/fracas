#version 330 core

out vec4 FragColor;

in vec3 frag_world_pos;
in vec2 frag_uv;
in vec3 frag_normal;

uniform vec3 camera_position;

#include debug_uniform 
#include pbr_uniforms  
#include pbr_env_uniforms  

#include consts  
#include pbr

void main()
{
    vec3 light_pos = vec3(0, 4, 0);
    vec3 light_color = vec3(1, 1, 1);

    vec3 albedo = texture(albedo_texture, frag_uv).xyz;
    vec3 normal = texture(normal_texture, frag_uv).xyz;
    float metal = texture(metal_texture, frag_uv).x;
    float roughness = max(texture(roughness_texture, frag_uv).x, 0.001);
    vec3 emit = texture(emit_texture, frag_uv).rgb;
    float ao = texture(ao_texture, frag_uv).x;

    vec3 n = normalize(frag_normal);
    vec3 V = normalize(camera_position - frag_world_pos);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);
    
    vec3  light_out = PbrLight(albedo, roughness, metal, n, V, f0, light_pos, light_color); 
    vec3 ambient = PbrAmbient(irradiance, env_map, brdf, albedo, roughness, metal, ao, n, V, f0);

    vec3 color = light_out + ambient + (emit * 3);
	
    color = color / (color + vec3(1));
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
    //FragColor = vec4(emit, 1.0);
} 