#version 330 core

out vec4 FragColor;

in vec3 frag_world_pos;
in vec2 frag_uv;
in vec3 frag_normal;

in vec4 frag_clip_pos;

uniform vec3 camera_position;
layout(binding=9) uniform sampler2D reflection_texture;

#include debug_uniform
#include pbr_uniforms 
#include pbr_env_uniforms
#include light_uniforms

#include consts
#include pbr

vec3 PbrPlanarReflect(sampler2D reflection, vec3 albedo, float roughness, float metal, float ao)
{
    vec3 normal = normalize(frag_normal);
    vec3 to_eye = normalize(camera_position - frag_world_pos);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);

    vec2 r_screen = frag_clip_pos.xy / frag_clip_pos.w;
    vec2 r = vec2(0.5, 0.5) + 0.5 * r_screen;
    vec3 F = FresnelSchlickRoughness(max(dot(normal, to_eye), 0.0), f0, roughness);
    
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    vec3 prefilteredColor = textureLod(reflection, r, roughness * MAX_REFLECTION_LOD).rgb;   
    vec2 envBRDF  = texture(brdf, vec2(max(dot(normal, to_eye), 0.0), roughness)).rg;
    vec3 ambient_specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
    
    ao = sqrt(ao); // blender ao is too strong

    return ambient_specular * ao; 
}

void main()
{
    vec3 albedo = texture(albedo_texture, frag_uv).xyz;
    vec3 normal = texture(normal_texture, frag_uv).xyz;
    float metal = texture(metal_texture, frag_uv).x;
    float roughness = max(texture(roughness_texture, frag_uv).x, 0.001); // zero roughness bad
    vec3 emit = texture(emit_texture, frag_uv).rgb;
    float ao = texture(ao_texture, frag_uv).x;

    normal = normalize(frag_normal);
    vec3 light_out = {0, 0, 0};
    for (int i = 0; i < num_lights; i++){
        light_out += PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, spot_lights[i]); 
    }
    vec3 ambient = PbrPlanarReflect(reflection_texture, albedo, roughness, metal, ao);

    vec3 color = light_out + ambient + (emit * 10);
    FragColor = vec4(color, 1.0);
} 