$section vert

layout (location = $uniform_push) uniform mat4 model;
layout (location = $uniform_push) uniform mat4 view;
layout (location = $uniform_push) uniform mat4 projection;

layout (location = $vertex_input) in vec3 pos;
layout (location = $vertex_input) in vec2 uv;
layout (location = $vertex_input) in vec3 normal;

layout (location = $vertex_output) out vec3 frag_world_pos;
layout (location = $vertex_output) out vec2 frag_uv;
layout (location = $vertex_output) out vec3 frag_normal;

$include basic.camera

void pbr_lit_3d_vert()
{
    frag_uv = uv;
    frag_normal = mat3(transpose(inverse(model))) * normal;
    frag_world_pos = (model * vec4(pos, 1.0)).xyz;
    gl_Position = projection * view * model * vec4(pos, 1.0);
}

$section frag

$include basic.constants
$include basic.camera
$include lighting.lights

$set pbr_texture_offset $texture
uniform layout(binding=$texture) sampler2D brdf;

layout (location = $frag_input) in vec3 frag_world_pos;
layout (location = $frag_input) in vec2 frag_uv;
layout (location = $frag_input) in vec3 frag_normal;

// everything in this section is from
// https://learnopengl.com/PBR/Lighting
float DistributionGGX(vec3 n, vec3 h, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(n, h), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / max(denom, 0.001);
}
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 n, vec3 V, vec3 l, float roughness)
{
    float NdotV = max(dot(n, V), 0.0);
    float NdotL = max(dot(n, l), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
vec3 FresnelSchlick(float cosTheta, vec3 f0)
{
    return f0 + (1.0 - f0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

vec3 PbrLight(vec3 position, vec3 normal, vec3 camera, vec3 albedo,
              float roughness, float metal, LightResult light)
{
    vec3  to_eye        = normalize(camera - position);
    vec3  halfway       = normalize(to_eye + light.to_light);
    
    vec3 f0   = vec3(0.04); 
    f0        = mix(f0, albedo, metal);
    float ndf = DistributionGGX(normal, halfway, roughness);        
    float g   = GeometrySmith(normal, to_eye, light.to_light, roughness);      
    vec3 f    = FresnelSchlick(max(dot(halfway, to_eye), 0.0), f0);       
    
    vec3 kS = f;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metal;	  
    
    vec3 numerator    = ndf * g * f;
    float denominator = 4.0 * max(dot(normal, to_eye), 0.0) * max(dot(normal, light.to_light), 0.0);
    vec3 specular     = numerator / max(denominator, 0.001);  
        
    float n_dot_l = max(dot(normal, light.to_light), 0.0);    
    return light.lit_percentage * (kD * albedo / PI + specular) * light.radiance * n_dot_l;             
}

vec3 PbrAmbient(vec3 position, vec3 normal, vec3 albedo, float roughness, float metal, float ao)
{
    vec3 to_eye = normalize(camera_position - position);

    vec3 f0 = vec3(0.04); 
    f0      = mix(f0, albedo, metal);

    vec3 F = FresnelSchlickRoughness(max(dot(normal, to_eye), 0.0), f0, roughness);
    vec3 ambient_kS = F;
    vec3 ambient_kD = 1.0 - ambient_kS;
    ambient_kD *= 1.0 - metal;	  
    vec3 ambient_irradiance = sampleIrradianceReflection(position, normal);
    vec3 ambient_diffuse = ambient_irradiance * albedo;
    
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    vec3 prefilteredColor = sampleSpecularReflection(to_eye, normal, roughness);   
    vec2 envBRDF  = texture(brdf, vec2(max(dot(normal, to_eye), 0.0), roughness)).rg;
    vec3 ambient_specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
    
    ao = sqrt(ao); // blender ao is too strong
    return (ambient_kD * ambient_diffuse + ambient_specular) * ao; 
}

vec4 pbr_lit_3d_frag(vec3 albedo, vec3 normal, float metal, float roughness, vec3 emit, float ao, float alpha)
{
  normal = normalize(normal);
  roughness = max(roughness, 0.001); // zero roughness bad

  vec3 light_out = {0, 0, 0};
  for (int i = 0; i < num_lights; i++){
    LightResult l = CalculateSpotLight(frag_world_pos, normal, spot_lights[i]);
    light_out += PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, l); 
  }
  LightResult directional_l = CalculateDirectionalLight(frag_world_pos, normal, directional_light);
  light_out += PbrLight(frag_world_pos, normal, camera_position, albedo, roughness, metal, directional_l); 

  vec3 ambient = PbrAmbient(frag_world_pos, normal, albedo, roughness, metal, ao);

  vec3 color = light_out + ambient + (emit * 10);
//   return vec4(color, alpha);

  return vec4(sampleIrradianceReflection(frag_world_pos, normal), alpha);
}