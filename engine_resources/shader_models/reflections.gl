$section standard

$set reflections_texture_offset $texture
uniform layout(binding=$texture) samplerCube irradiance;
uniform layout(binding=$texture) samplerCube env_map;

vec3 sampleSpecularReflection(vec3 to_eye, vec3 normal, float roughness)
{
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    
    vec3 r = reflect(-to_eye, normal);   
    return textureLod(env_map, r, roughness * MAX_REFLECTION_LOD).rgb;   
}

vec3 sampleIrradianceReflection(vec3 world_pos, vec3 normal)
{
    return texture(irradiance, normal).rgb;
}

$section probes

$set reflections_texture_offset $texture
uniform layout(binding=$texture) samplerCube env_map;
uniform layout(binding=$texture) samplerCubeArray irradianceArray;

vec3 sampleSpecularReflection(vec3 to_eye, vec3 normal, float roughness)
{
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    
    vec3 r = reflect(-to_eye, normal);   
    return textureLod(env_map, r, roughness * MAX_REFLECTION_LOD).rgb;   
}

ivec3 dims = ivec3(12, 4, 6);
vec3 vol_min = {-20, 0, -10};
vec3 vol_max = {20, 15, 10};

vec4 sample_probe(ivec3 i, vec3 normal) {
    int texture_index = (dims.z * dims.y) * i.x + (dims.z) * i.y + i.z;
    return texture(irradianceArray, vec4(normal, texture_index));
}

vec3 sampleIrradianceReflection(vec3 world_pos, vec3 normal)
{
    vec3 cell_size = (vol_max - vol_min) / dims;
    vec3 pos_in_volume = (world_pos - vol_min) / cell_size;
    ivec3 root = ivec3(pos_in_volume - vec3(.5, .5, .5));
    root = clamp(root, ivec3(0, 0, 0), dims - ivec3(2, 2, 2));
    
    ivec3 p0 = root + ivec3(0, 0, 0);
    ivec3 p1 = root + ivec3(0, 0, 1);
    ivec3 p2 = root + ivec3(0, 1, 0);
    ivec3 p3 = root + ivec3(0, 1, 1);
    ivec3 p4 = root + ivec3(1, 0, 0);
    ivec3 p5 = root + ivec3(1, 0, 1);
    ivec3 p6 = root + ivec3(1, 1, 0);
    ivec3 p7 = root + ivec3(1, 1, 1);

    vec3 v0 = sample_probe(p0, normal).rgb;
    vec3 v1 = sample_probe(p1, normal).rgb;
    vec3 v2 = sample_probe(p2, normal).rgb;
    vec3 v3 = sample_probe(p3, normal).rgb;
    vec3 v4 = sample_probe(p4, normal).rgb;
    vec3 v5 = sample_probe(p5, normal).rgb;
    vec3 v6 = sample_probe(p6, normal).rgb;
    vec3 v7 = sample_probe(p7, normal).rgb;

    vec3 blend_factor = pos_in_volume - (root + vec3(.5, .5, .5));
    blend_factor = clamp(blend_factor, vec3(0, 0, 0), vec3(1, 1, 1));
    vec3 bz0 = mix(v0, v1, blend_factor.z);
    vec3 bz1 = mix(v2, v3, blend_factor.z);
    vec3 bz2 = mix(v4, v5, blend_factor.z);
    vec3 bz3 = mix(v6, v7, blend_factor.z);

    vec3 by0 = mix(bz0, bz1, blend_factor.y);
    vec3 by1 = mix(bz2, bz3, blend_factor.y);

    vec3 bx0 = mix(by0, by1, blend_factor.x);

    return bx0;
}

$section planar

$set reflections_texture_offset $texture
uniform layout(binding=$texture) sampler2D reflection_texture;

// forward decl
vec4 planar_clip_pos();

vec3 sampleSpecularReflection(vec3 to_eye, vec3 normal, float roughness)
{
    const float MAX_REFLECTION_LOD = 7.0; // assuming 128x128 texture
    
    vec4 clip_pos = planar_clip_pos();
    vec2 r_screen = clip_pos.xy / clip_pos.w;
    vec2 r = vec2(0.5, 0.5) + 0.5 * r_screen;
    return textureLod(reflection_texture, r, roughness * MAX_REFLECTION_LOD).rgb;
}

vec3 sampleIrradianceReflection(vec3 normal)
{
    return vec3(0, 0, 0);
}